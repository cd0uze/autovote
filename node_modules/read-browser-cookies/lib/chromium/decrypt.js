"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChromeCookieDecryptor = void 0;
const helper_1 = require("../helper");
const mac = __importStar(require("./decrypt-mac"));
const macCipherKeys = {};
async function macGetCipherKey(keyringName) {
    if (!macCipherKeys[keyringName]) {
        const password = await mac.getPassword(keyringName);
        const cipherKey = mac.getCipherKey(password);
        macCipherKeys[keyringName] = cipherKey;
    }
    return macCipherKeys[keyringName];
}
class ChromeCookieDecryptor {
    constructor(browserDir, keyringName, keyring) {
        this.init = (0, helper_1.defineCrossPlatform)({
            async mac() {
                await macGetCipherKey(this.keyringName);
            },
            async win() {
                //
            },
            async linux() {
                //
            },
        });
        this.decrypt = (0, helper_1.defineCrossPlatform)({
            mac(encrypted) {
                const cipherKey = macCipherKeys[this.keyringName];
                const decrypted = mac.decrypt(cipherKey, encrypted);
                return decrypted;
            },
        });
        this.browserDir = browserDir;
        this.keyringName = keyringName;
        this.keyring = keyring;
    }
}
exports.ChromeCookieDecryptor = ChromeCookieDecryptor;
